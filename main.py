# ---------- –¢–ï–ö–°–¢–û–í–´–ï –ö–û–ú–ê–ù–î–´ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ----------
@dp.message(Command("search"))
async def search_cmd(message: Message, state: FSMContext):
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_airports_keyboard(for_destination=False)
    )
    await state.set_state(SearchFlight.origin)# -------------------------
# Configuration & constants
# -------------------------

import os
import asyncio
import httpx
import aiosqlite
from datetime import datetime, timedelta
from dateutil.parser import isoparse

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# –î–æ–±–∞–≤–ª—è–µ–º aiohttp –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
from aiohttp import web

# ================== CONFIG ==================
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TRAVELPAYOUTS_TOKEN = os.getenv("TRAVELPAYOUTS_TOKEN")
TP_CURRENCY = os.getenv("TP_CURRENCY", "rub")
POLL_INTERVAL_SECONDS = int(os.getenv("POLL_INTERVAL_SECONDS", "900"))  # 15 –º–∏–Ω
RATE_LIMIT_MS = int(os.getenv("RATE_LIMIT_MS", "400"))
PORT = int(os.getenv("PORT", "10000"))  # Render.com –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT

bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# ================== HELPERS ==================
async def fetch_flights(origin, destination, date, adults=1):
    url = "https://api.travelpayouts.com/aviasales/v3/prices_for_dates"
    params = {
        "origin": origin,
        "destination": destination,
        "departure_at": date,
        "adults": adults,
        "currency": TP_CURRENCY,
        "token": TRAVELPAYOUTS_TOKEN,
    }
    async with httpx.AsyncClient() as client:
        resp = await client.get(url, params=params)
        if resp.status_code == 200:
            return resp.json().get("data", [])
        return []

async def search_range(origin, destination, start_date, end_date, adults=1):
    results = []
    date = start_date
    while date <= end_date:
        flights = await fetch_flights(origin, destination, date.isoformat(), adults)
        for f in flights:
            f["search_date"] = date.isoformat()
        results.extend(flights)
        await asyncio.sleep(RATE_LIMIT_MS / 1000)
        date += timedelta(days=1)
    return results

def validate_date(date_str: str) -> datetime | None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º."""
    try:
        d = datetime.strptime(date_str, "%Y-%m-%d").date()
        if d < datetime.today().date():
            return None
        return d
    except ValueError:
        return None

# ================== DB ==================
async def init_db():
    async with aiosqlite.connect("alerts.db") as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS alerts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            origin TEXT,
            destination TEXT,
            start_date TEXT,
            end_date TEXT,
            adults INTEGER,
            threshold INTEGER
        )
        """)
        await db.commit()

async def add_alert(user_id, origin, destination, start_date, end_date, adults, threshold):
    async with aiosqlite.connect("alerts.db") as db:
        await db.execute(
            "INSERT INTO alerts (user_id, origin, destination, start_date, end_date, adults, threshold) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (user_id, origin, destination, start_date, end_date, adults, threshold),
        )
        await db.commit()

async def get_alerts():
    async with aiosqlite.connect("alerts.db") as db:
        async with db.execute("SELECT id, user_id, origin, destination, start_date, end_date, adults, threshold FROM alerts") as cur:
            return await cur.fetchall()

async def delete_alert(alert_id, user_id):
    async with aiosqlite.connect("alerts.db") as db:
        await db.execute("DELETE FROM alerts WHERE id = ? AND user_id = ?", (alert_id, user_id))
        await db.commit()

# ================== FSM ==================
class SearchFlight(StatesGroup):
    origin = State()
    destination = State()
    date1 = State()
    date2 = State()
    adults = State()

# ================== BOT HANDLERS ==================
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –∏—Å–∫–∞—Ç—å –±–∏–ª–µ—Ç—ã ‚úàÔ∏è\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/search ‚Äî –ø–æ—à–∞–≥–æ–≤—ã–π –ø–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤\n"
        "/alert ORIG DEST 2025-09-10 2025-09-15 1 5000 ‚Äî —Å–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ (–ø–æ—Ä–æ–≥ 5000‚ÇΩ)\n"
        "/alerts ‚Äî —Å–ø–∏—Å–æ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π\n"
        "/cancel ID ‚Äî —É–¥–∞–ª–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ"
    )

# ---------- –ü–û–®–ê–ì–û–í–´–ô –ü–û–ò–°–ö ----------
@dp.message(Command("search"))
async def start_search(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ORIG ‚Äî –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –≤—ã–ª–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: MOW):")
    await state.set_state(SearchFlight.origin)

@dp.message(SearchFlight.origin)
async def set_origin(message: Message, state: FSMContext):
    await state.update_data(origin=message.text.strip().upper())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ DEST ‚Äî –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: LED):")
    await state.set_state(SearchFlight.destination)

@dp.message(SearchFlight.destination)
async def set_destination(message: Message, state: FSMContext):
    await state.update_data(destination=message.text.strip().upper())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ DATE1 ‚Äî –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD):")
    await state.set_state(SearchFlight.date1)

@dp.message(SearchFlight.date1)
async def set_date1(message: Message, state: FSMContext):
    d = validate_date(message.text.strip())
    if not d:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º.")
        return
    await state.update_data(date1=str(d))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ DATE2 ‚Äî –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD):")
    await state.set_state(SearchFlight.date2)

@dp.message(SearchFlight.date2)
async def set_date2(message: Message, state: FSMContext):
    d = validate_date(message.text.strip())
    if not d:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º.")
        return
    data = await state.get_data()
    if d < isoparse(data["date1"]).date():
        await message.answer("‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(date2=str(d))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ADULTS ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
    await state.set_state(SearchFlight.adults)

@dp.message(SearchFlight.adults)
async def finish_search(message: Message, state: FSMContext):
    try:
        adults = int(message.text.strip())
        if adults < 1:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ (–º–∏–Ω–∏–º—É–º 1).")
        return

    await state.update_data(adults=adults)
    data = await state.get_data()
    await state.clear()

    # –∑–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
    flights = await search_range(
        data["origin"],
        data["destination"],
        isoparse(data["date1"]).date(),
        isoparse(data["date2"]).date(),
        data["adults"]
    )

    if not flights:
        await message.answer("–ë–∏–ª–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî")
        return

    flights = sorted(flights, key=lambda x: x.get("price", 999999))[:5]
    for f in flights:
        text = (
            f"‚úàÔ∏è {f.get('origin')} ‚Üí {f.get('destination')}\n"
            f"üìÖ {f.get('departure_at')}\n"
            f"üí∞ {f.get('price')} ‚ÇΩ\n"
            f"üõ´ {f.get('airline', '‚Äî')}\n"
            f"üîó https://www.aviasales.ru{f.get('link', '')}"
        )
        await message.answer(text)

# ---------- ALERTS ----------
# ---------- –¢–ï–ö–°–¢–û–í–´–ï –ö–û–ú–ê–ù–î–´ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ----------
@dp.message(Command("search"))
async def search_cmd(message: Message, state: FSMContext):
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_airports_keyboard(for_destination=False)
    )
    await state.set_state(SearchFlight.origin)

@dp.message(Command("alert"))
async def alert_cmd(message: Message):
    try:
        parts = message.text.split()
        if len(parts) != 6:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        _, origin, destination, d1, d2, threshold = parts
        start_date, end_date = isoparse(d1).date(), isoparse(d2).date()
        threshold = int(threshold)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç
        if start_date < datetime.now().date():
            await message.answer("‚ùå –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º!")
            return
        
        if end_date < start_date:
            await message.answer("‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π!")
            return
        
        await add_alert(message.from_user.id, origin.upper(), destination.upper(), str(start_date), str(end_date), 1, threshold)
        
        await message.answer(
            f"‚úÖ <b>–û–ø–æ–≤–µ—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"–ú–∞—Ä—à—Ä—É—Ç: {origin.upper()} ‚Üí {destination.upper()}\n"
            f"–ü–µ—Ä–∏–æ–¥: {start_date} ‚Äî {end_date}\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {threshold} ‚ÇΩ\n\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞.",
            reply_markup=get_main_menu()
        )
    except Exception as e:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "<code>/alert ORIG DEST YYYY-MM-DD YYYY-MM-DD –¶–ï–ù–ê</code>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/alert MOW LED 2025-12-01 2025-12-15 8000</code>\n\n"
            f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}"
        )

@dp.message(Command("alerts"))
async def alerts_cmd(message: Message):
    alerts = await get_alerts()
    user_alerts = [a for a in alerts if a[1] == message.from_user.id]
    
    if not user_alerts:
        await message.answer(
            "üìã <b>–í–∞—à–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π:\n"
            "<code>/alert MOW LED 2025-12-01 2025-12-15 8000</code>",
            reply_markup=get_main_menu()
        )
        return
    
    text = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:</b>\n\n"
    for i, alert in enumerate(user_alerts, 1):
        id_, user_id, origin, destination, start_date, end_date, adults, threshold = alert
        text += (
            f"<b>{i}. {origin} ‚Üí {destination}</b>\n"
            f"üìÖ {start_date} ‚Äî {end_date}\n"
            f"üí∞ –¥–æ {threshold} ‚ÇΩ\n"
            f"üÜî ID: {id_}\n\n"
        )
    
    text += "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/cancel ID</code>"
    
    await message.answer(text, reply_markup=get_main_menu())

@dp.message(Command("cancel"))
async def cancel_cmd(message: Message):
    try:
        parts = message.text.split()
        if len(parts) != 2:
            raise ValueError("–£–∫–∞–∂–∏—Ç–µ ID –æ–ø–æ–≤–µ—â–µ–Ω–∏—è")
        
        alert_id = int(parts[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        alerts = await get_alerts()
        user_alert = None
        for alert in alerts:
            if alert[0] == alert_id and alert[1] == message.from_user.id:
                user_alert = alert
                break
        
        if not user_alert:
            await message.answer("‚ùå –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º!")
            return
        
        await delete_alert(alert_id, message.from_user.id)
        
        await message.answer(
            f"‚úÖ <b>–û–ø–æ–≤–µ—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!</b>\n\n"
            f"–£–¥–∞–ª–µ–Ω–æ: {user_alert[2]} ‚Üí {user_alert[3]}\n"
            f"–ü–µ—Ä–∏–æ–¥: {user_alert[4]} ‚Äî {user_alert[5]}",
            reply_markup=get_main_menu()
        )
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {str(e)}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>/cancel ID</code>\n"
            "ID –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ —Å–ø–∏—Å–∫–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π (/alerts)"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö callback'–æ–≤
@dp.callback_query(F.data == "ignore")
async def ignore_callback(callback: CallbackQueryType):
    await callback.answer()

# ================== WEB SERVER ==================
async def health_check(request):
    return web.Response(
        text="‚úÖ Telegram Bot is running! ü§ñ\nTime: " + datetime.now().isoformat(), 
        status=200,
        content_type='text/plain; charset=utf-8'
    )

async def status_check(request):
    try:
        alerts_count = len(await get_alerts())
        bot_info = await bot.get_me()
        return web.json_response({
            "status": "ok",
            "alerts_count": alerts_count,
            "bot_username": bot_info.username,
            "bot_id": bot_info.id,
            "timestamp": datetime.now().isoformat()
        })
    except Exception as e:
        return web.json_response({
            "status": "error", 
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }, status=500)

async def create_app():
    app = web.Application()
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    app.router.add_get('/status', status_check)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    async def log_requests(request, handler):
        start = datetime.now()
        response = await handler(request)
        duration = (datetime.now() - start).total_seconds()
        print(f"üì° {request.method} {request.path} - {response.status} ({duration:.3f}s)")
        return response
    
    app.middlewares.append(log_requests)
    return app

# ================== BACKGROUND TASK ==================
async def monitor_alerts():
    while True:
        alerts = await get_alerts()
        for alert in alerts:
            id_, user_id, origin, destination, d1, d2, adults, threshold = alert
            start_date, end_date = isoparse(d1).date(), isoparse(d2).date()
            flights = await search_range(origin, destination, start_date, end_date, adults)
            for f in flights:
                if f.get("price", 999999) <= threshold:
                    text = (
                        f"üî• –ù–∞–π–¥–µ–Ω –±–∏–ª–µ—Ç –ø–æ {f.get('price')} ‚ÇΩ!\n"
                        f"‚úàÔ∏è {f.get('origin')} ‚Üí {f.get('destination')}\n"
                        f"üìÖ {f.get('departure_at')}\n"
                        f"üõ´ {f.get('airline', '‚Äî')}\n"
                        f"üîó https://www.aviasales.ru{f.get('link', '')}"
                    )
                    try:
                        await bot.send_message(user_id, text)
                    except Exception:
                        pass
        await asyncio.sleep(POLL_INTERVAL_SECONDS)

# ================== MAIN ==================
async def main():
    await init_db()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ alerts –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(monitor_alerts())
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    app = await create_app()
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ –±–æ—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    await asyncio.gather(
        site.start(),
        dp.start_polling(bot)
    )

if __name__ == "__main__":
    asyncio.run(main())
