# main.py
# -------------------------
# Configuration & constants
# -------------------------

import os
import asyncio
import httpx
import aiosqlite
from datetime import datetime, timedelta
from dateutil.parser import isoparse

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CallbackQuery
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery as CallbackQueryType
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# –î–æ–±–∞–≤–ª—è–µ–º aiohttp –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
from aiohttp import web

# ================== CONFIG ==================
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TRAVELPAYOUTS_TOKEN = os.getenv("TRAVELPAYOUTS_TOKEN")
TP_CURRENCY = os.getenv("TP_CURRENCY", "rub")
POLL_INTERVAL_SECONDS = int(os.getenv("POLL_INTERVAL_SECONDS", "900"))  # 15 –º–∏–Ω
RATE_LIMIT_MS = int(os.getenv("RATE_LIMIT_MS", "400"))
PORT = int(os.getenv("PORT", "10000"))  # Render.com –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT

bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# ================== HELPERS ==================
async def fetch_flights(origin, destination, date, adults=1):
    url = "https://api.travelpayouts.com/aviasales/v3/prices_for_dates"
    params = {
        "origin": origin,
        "destination": destination,
        "departure_at": date,
        "adults": adults,
        "currency": TP_CURRENCY,
        "token": TRAVELPAYOUTS_TOKEN,
    }
    async with httpx.AsyncClient() as client:
        resp = await client.get(url, params=params)
        if resp.status_code == 200:
            return resp.json().get("data", [])
        return []

async def search_range(origin, destination, start_date, end_date, adults=1):
    results = []
    date = start_date
    while date <= end_date:
        flights = await fetch_flights(origin, destination, date.isoformat(), adults)
        for f in flights:
            f["search_date"] = date.isoformat()
        results.extend(flights)
        await asyncio.sleep(RATE_LIMIT_MS / 1000)
        date += timedelta(days=1)
    return results

def validate_date(date_str: str) -> datetime | None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º."""
    try:
        d = datetime.strptime(date_str, "%Y-%m-%d").date()
        if d < datetime.today().date():
            return None
        return d
    except Exception:
        return None

# ================== DB ==================
DB_PATH = "alerts.db"

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS alerts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            origin TEXT,
            destination TEXT,
            start_date TEXT,
            end_date TEXT,
            adults INTEGER,
            threshold INTEGER
        )
        """)
        await db.commit()

async def add_alert(user_id, origin, destination, start_date, end_date, adults, threshold):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO alerts (user_id, origin, destination, start_date, end_date, adults, threshold) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (user_id, origin, destination, start_date, end_date, adults, threshold),
        )
        await db.commit()

async def get_alerts():
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT id, user_id, origin, destination, start_date, end_date, adults, threshold FROM alerts") as cur:
            return await cur.fetchall()

async def delete_alert(alert_id, user_id):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM alerts WHERE id = ? AND user_id = ?", (alert_id, user_id))
        await db.commit()

# ================== FSM ==================
class SearchFlight(StatesGroup):
    origin = State()
    destination = State()
    date1 = State()
    date2 = State()
    adults = State()

# ================== KEYBOARDS ==================
def get_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤", callback_data="search_flights")],
        [InlineKeyboardButton(text="üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏", callback_data="manage_alerts")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data="show_alerts")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    return keyboard

def get_alerts_menu():
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ", callback_data="create_alert")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data="show_alerts")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    return keyboard

def get_airports_keyboard(for_destination=False):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤"""
    airports = {
        "MOW": "üèõÔ∏è –ú–æ—Å–∫–≤–∞",
        "LED": "üè∞ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        "AER": "üèñÔ∏è –°–æ—á–∏",
        "MRV": "üèîÔ∏è –ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã",
        "KZN": "üïå –ö–∞–∑–∞–Ω—å",
        "CSY": "üåä –ß–µ–±–æ–∫—Å–∞—Ä—ã"
    }
    
    keyboard = []
    for code, name in airports.items():
        callback_data = f"dest_{code}" if for_destination else f"orig_{code}"
        keyboard.append([InlineKeyboardButton(text=name, callback_data=callback_data)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
    other_callback = "dest_other" if for_destination else "orig_other"
    keyboard.append([InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –∫–æ–¥", callback_data=other_callback)])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_search")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_calendar_keyboard(year, month, selected_dates=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç"""
    import calendar
    
    if selected_dates is None:
        selected_dates = []
    
    # –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    month_names = [
        "", "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ]
    
    keyboard = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    keyboard.append([InlineKeyboardButton(
        text=f"{month_names[month]} {year}", 
        callback_data="ignore"
    )])
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    keyboard.append([
        InlineKeyboardButton(text="–ü–Ω", callback_data="ignore"),
        InlineKeyboardButton(text="–í—Ç", callback_data="ignore"),
        InlineKeyboardButton(text="–°—Ä", callback_data="ignore"),
        InlineKeyboardButton(text="–ß—Ç", callback_data="ignore"),
        InlineKeyboardButton(text="–ü—Ç", callback_data="ignore"),
        InlineKeyboardButton(text="–°–±", callback_data="ignore"),
        InlineKeyboardButton(text="–í—Å", callback_data="ignore"),
    ])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Å—è—Ü–∞
    cal = calendar.monthcalendar(year, month)
    today = datetime.now().date()
    
    for week in cal:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
            else:
                current_date = datetime(year, month, day).date()
                
                if current_date < today:
                    # –ü—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã
                    row.append(InlineKeyboardButton(text="‚ùå", callback_data="ignore"))
                elif current_date in selected_dates:
                    # –£–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã
                    row.append(InlineKeyboardButton(text=f"‚úÖ{day}", callback_data=f"date_{year}_{month}_{day}"))
                else:
                    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
                    row.append(InlineKeyboardButton(text=str(day), callback_data=f"date_{year}_{month}_{day}"))
        keyboard.append(row)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    prev_month, prev_year = (month - 1, year) if month > 1 else (12, year - 1)
    next_month, next_year = (month + 1, year) if month < 12 else (1, year + 1)
    
    keyboard.append([
        InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"cal_{prev_year}_{prev_month}"),
        InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"cal_{next_year}_{next_month}")
    ])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    if len(selected_dates) >= 2:
        keyboard.append([InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="calendar_done")])
    elif len(selected_dates) == 1:
        keyboard.append([InlineKeyboardButton(text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –¥–∞—Ç—É", callback_data="ignore")])
    else:
        keyboard.append([InlineKeyboardButton(text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –¥–∞—Ç—É", callback_data="ignore")])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_search")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# ================== BOT HANDLERS ==================
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer(
        "‚úàÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ–∏—Å–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
        "üîç –ò—Å–∫–∞—Ç—å –¥–µ—à–µ–≤—ã–µ –±–∏–ª–µ—Ç—ã\n"
        "üîî –°–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö —Ü–µ–Ω–∞—Ö\n"
        "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )

# ================== CALLBACK HANDLERS ==================
@dp.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQueryType):
    await callback.message.edit_text(
        "‚úàÔ∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )
    await callback.answer()

@dp.callback_query(F.data == "help")
async def show_help(callback: CallbackQueryType):
    help_text = (
        "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "üîç <b>–ü–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤:</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã –≤—ã–ª–µ—Ç–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã –ø–æ–∏—Å–∫–∞. "
        "–ë–æ—Ç –Ω–∞–π–¥–µ—Ç 5 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n\n"
        "üîî <b>–û–ø–æ–≤–µ—â–µ–Ω–∏—è:</b>\n"
        "–°–æ–∑–¥–∞–π—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–∞—Ä—à—Ä—É—Ç–∞, –¥–∞—Ç –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã. "
        "–ë–æ—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å, –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –±–∏–ª–µ—Ç—ã.\n\n"
        "‚úàÔ∏è <b>–ö–æ–¥—ã –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤:</b>\n"
        "‚Ä¢ MOW - –ú–æ—Å–∫–≤–∞\n"
        "‚Ä¢ LED - –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\n"
        "‚Ä¢ AER - –°–æ—á–∏\n"
        "‚Ä¢ MRV - –ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã\n"
        "‚Ä¢ KZN - –ö–∞–∑–∞–Ω—å\n"
        "‚Ä¢ CSY - –ß–µ–±–æ–∫—Å–∞—Ä—ã\n\n"
        "–ò–ª–∏ –≤–≤–æ–¥–∏—Ç–µ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π IATA –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(help_text, reply_markup=keyboard)
    await callback.answer()

# ---------- –ü–û–ò–°–ö –ë–ò–õ–ï–¢–û–í (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏) ----------
@dp.callback_query(F.data == "search_flights")
async def start_search_callback(callback: CallbackQueryType, state: FSMContext):
    await callback.message.edit_text(
        "üõ´ <b>–ü–æ–∏—Å–∫ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_airports_keyboard(for_destination=False)
    )
    await state.set_state(SearchFlight.origin)
    await callback.answer()

@dp.callback_query(F.data.startswith("orig_"))
async def handle_origin_selection(callback: CallbackQueryType, state: FSMContext):
    airport_code = callback.data.split("_", 1)[1]
    
    if airport_code == "other":
        await callback.message.edit_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: SVO, VKO, DME):"
        )
        await callback.answer()
        return
    
    await state.update_data(origin=airport_code)
    await callback.message.edit_text(
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{airport_code}</b>\n\n"
        "üõ¨ –í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
        reply_markup=get_airports_keyboard(for_destination=True)
    )
    await state.set_state(SearchFlight.destination)
    await callback.answer()

@dp.message(SearchFlight.origin)
async def handle_origin_text(message: Message, state: FSMContext):
    origin = message.text.strip().upper()
    if len(origin) != 3:
        await message.answer("‚ùå –ö–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 3 –±—É–∫–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(origin=origin)
    await message.answer(
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{origin}</b>\n\n"
        "üõ¨ –í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
        reply_markup=get_airports_keyboard(for_destination=True)
    )
    await state.set_state(SearchFlight.destination)

@dp.callback_query(F.data.startswith("dest_"))
async def handle_destination_selection(callback: CallbackQueryType, state: FSMContext):
    airport_code = callback.data.split("_", 1)[1]
    
    if airport_code == "other":
        await callback.message.edit_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: LED, KZN, AER):"
        )
        await callback.answer()
        return
    
    data = await state.get_data()
    origin = data.get("origin")
    if origin and airport_code == origin:
        await callback.answer("‚ùå –ê—ç—Ä–æ–ø–æ—Ä—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º!", show_alert=True)
        return
    
    await state.update_data(destination=airport_code, selected_dates=[])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    now = datetime.now()
    await callback.message.edit_text(
        f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç: <b>{origin} ‚Üí {airport_code}</b>\n\n"
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏ (—Å–Ω–∞—á–∞–ª–∞ –¥–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞, –∑–∞—Ç–µ–º –¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è):",
        reply_markup=get_calendar_keyboard(now.year, now.month, [])
    )
    await state.set_state(SearchFlight.date1)
    await callback.answer()

@dp.message(SearchFlight.destination)
async def handle_destination_text(message: Message, state: FSMContext):
    destination = message.text.strip().upper()
    if len(destination) != 3:
        await message.answer("‚ùå –ö–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 3 –±—É–∫–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    if destination == data.get("origin"):
        await message.answer("‚ùå –ê—ç—Ä–æ–ø–æ—Ä—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(destination=destination, selected_dates=[])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    now = datetime.now()
    await message.answer(
        f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç: <b>{data['origin']} ‚Üí {destination}</b>\n\n"
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏ (—Å–Ω–∞—á–∞–ª–∞ –¥–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞, –∑–∞—Ç–µ–º –¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è):",
        reply_markup=get_calendar_keyboard(now.year, now.month, [])
    )
    await state.set_state(SearchFlight.date1)

@dp.callback_query(F.data.startswith("cal_"))
async def handle_calendar_navigation(callback: CallbackQueryType, state: FSMContext):
    try:
        _, year_str, month_str = callback.data.split("_")
        year, month = int(year_str), int(month_str)
    except Exception:
        await callback.answer()
        return
    
    data = await state.get_data()
    selected_dates = data.get("selected_dates", [])
    
    await callback.message.edit_reply_markup(
        reply_markup=get_calendar_keyboard(year, month, selected_dates)
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("date_"))
async def handle_date_selection(callback: CallbackQueryType, state: FSMContext):
    try:
        _, year, month, day = callback.data.split("_")
        selected_date = datetime(int(year), int(month), int(day)).date()
    except Exception:
        await callback.answer()
        return
    
    data = await state.get_data()
    selected_dates = data.get("selected_dates", [])
    
    # Normalize list of date objects
    selected_dates = [d if isinstance(d, datetime) else d for d in selected_dates]
    
    if selected_date in selected_dates:
        # –£–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞
        selected_dates.remove(selected_date)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É
        selected_dates.append(selected_date)
        selected_dates.sort()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏
        if len(selected_dates) > 2:
            selected_dates = selected_dates[:2]
    
    await state.update_data(selected_dates=selected_dates)
    
    await callback.message.edit_reply_markup(
        reply_markup=get_calendar_keyboard(int(year), int(month), selected_dates)
    )
    await callback.answer()

@dp.callback_query(F.data == "calendar_done")
async def handle_calendar_done(callback: CallbackQueryType, state: FSMContext):
    data = await state.get_data()
    selected_dates = data.get("selected_dates", [])
    
    if not selected_dates or len(selected_dates) < 2:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–µ –¥–∞—Ç—ã!", show_alert=True)
        return
    
    date1, date2 = sorted(selected_dates)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—ã –≤ —Å—Ç–µ–π—Ç (—Å—Ç—Ä–æ–∫–∏) –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–æ –¥–∞–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º date –æ–±—ä–µ–∫—Ç—ã
    await state.update_data(date1=str(date1), date2=str(date2))
    # –ó–∞–±–∏—Ä–∞–µ–º origin/destination –¥–æ –æ—á–∏—Å—Ç–∫–∏
    origin = data.get("origin")
    destination = data.get("destination")
    await state.clear()
    
    await callback.message.edit_text(
        f"üîç <b>–ü–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤...</b>\n\n"
        f"–ú–∞—Ä—à—Ä—É—Ç: {origin} ‚Üí {destination}\n"
        f"–î–∞—Ç—ã: {date1} - {date2}\n\n"
        "‚è≥ –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫, —Å–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã."
    )
    
    flights = await search_range(origin, destination, date1, date2, 1)
    
    if not flights:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_flights")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            "üòî <b>–ë–∏–ª–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã –∏–ª–∏ –º–∞—Ä—à—Ä—É—Ç.",
            reply_markup=keyboard
        )
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    flights = sorted(flights, key=lambda x: x.get("price", 999999))[:5]
    
    results_text = f"‚úÖ <b>–¢–æ–ø {len(flights)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤:</b>\n\n"
    for i, f in enumerate(flights, 1):
        results_text += (
            f"<b>{i}. {f.get('origin')} ‚Üí {f.get('destination')}</b>\n"
            f"üìÖ {f.get('departure_at')}\n"
            f"üí∞ {f.get('price')} ‚ÇΩ\n"
            f"üõ´ {f.get('airline', '‚Äî')}\n"
            f"üîó <a href='https://www.aviasales.ru{f.get('link', '')}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>\n\n"
        )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_flights")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(results_text, reply_markup=keyboard, disable_web_page_preview=True)
    await callback.answer()

@dp.callback_query(F.data == "cancel_search")
async def cancel_search(callback: CallbackQueryType, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )
    await callback.answer()

# ---------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ü–û–í–ï–©–ï–ù–ò–Ø–ú–ò (–∫–Ω–æ–ø–∫–∏) ----------
@dp.callback_query(F.data == "manage_alerts")
async def manage_alerts_menu(callback: CallbackQueryType):
    await callback.message.edit_text(
        "üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏</b>\n\n"
        "–û–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ –±–∏–ª–µ—Ç—ã. "
        "–ö–æ–≥–¥–∞ —Ü–µ–Ω–∞ –æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_alerts_menu()
    )
    await callback.answer()

@dp.callback_query(F.data == "create_alert")
async def create_alert_callback(callback: CallbackQueryType):
    await callback.message.edit_text(
        "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<code>/alert ORIG DEST YYYY-MM-DD YYYY-MM-DD ADULTS –¶–ï–ù–ê</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>/alert MOW LED 2025-12-01 2025-12-15 1 8000</code>\n\n"
        "–ì–¥–µ:\n"
        "‚Ä¢ ORIG - –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ DEST - –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞ - –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–∏—Å–∫–∞\n"
        "‚Ä¢ –í—Ç–æ—Ä–∞—è –¥–∞—Ç–∞ - –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–∏—Å–∫–∞\n"
        "‚Ä¢ ADULTS - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö\n"
        "‚Ä¢ –¶–ï–ù–ê - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    await callback.answer()

@dp.callback_query(F.data == "show_alerts")
async def show_alerts_callback(callback: CallbackQueryType):
    alerts = await get_alerts()
    user_alerts = [a for a in alerts if a[1] == callback.from_user.id]
    
    if not user_alerts:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ", callback_data="create_alert")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            "üìã <b>–í–∞—à–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ –±–∏–ª–µ—Ç—ã!",
            reply_markup=keyboard
        )
        await callback.answer()
        return
    
    text = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:</b>\n\n"
    for i, alert in enumerate(user_alerts, 1):
        id_, user_id, origin, destination, start_date, end_date, adults, threshold = alert
        text += (
            f"<b>{i}. {origin} ‚Üí {destination}</b>\n"
            f"üìÖ {start_date} ‚Äî {end_date}\n"
            f"üë• {adults} adults\n"
            f"üí∞ –¥–æ {threshold} ‚ÇΩ\n"
            f"üÜî ID: {id_}\n\n"
        )
    
    text += "\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/cancel ID</code>"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="create_alert")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

# ---------- –¢–ï–ö–°–¢–û–í–´–ï –ö–û–ú–ê–ù–î–´ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å) ----------
@dp.message(Command("search"))
async def search_cmd(message: Message, state: FSMContext):
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_airports_keyboard(for_destination=False)
    )
    await state.set_state(SearchFlight.origin)

@dp.message(Command("alert"))
async def alert_cmd(message: Message):
    try:
        parts = message.text.split()
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Å 6 –∏–ª–∏ 7 —á–∞—Å—Ç—è–º–∏ (—Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ adults –∏–ª–∏ —Å adults)
        if len(parts) not in (6, 7):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        # —Ñ–æ—Ä–º–∞—Ç /alert ORIG DEST YYYY-MM-DD YYYY-MM-DD [ADULTS] PRICE
        if len(parts) == 6:
            _, origin, destination, d1, d2, threshold = parts
            adults = 1
        else:
            _, origin, destination, d1, d2, adults, threshold = parts
            adults = int(adults)
        start_date, end_date = isoparse(d1).date(), isoparse(d2).date()
        threshold = int(threshold)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç
        if start_date < datetime.now().date():
            await message.answer("‚ùå –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º!")
            return
        
        if end_date < start_date:
            await message.answer("‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π!")
            return
        
        await add_alert(message.from_user.id, origin.upper(), destination.upper(), str(start_date), str(end_date), adults, threshold)
        
        await message.answer(
            f"‚úÖ <b>–û–ø–æ–≤–µ—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"–ú–∞—Ä—à—Ä—É—Ç: {origin.upper()} ‚Üí {destination.upper()}\n"
            f"–ü–µ—Ä–∏–æ–¥: {start_date} ‚Äî {end_date}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö: {adults}\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {threshold} ‚ÇΩ\n\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞.",
            reply_markup=get_main_menu()
        )
    except Exception as e:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "<code>/alert ORIG DEST YYYY-MM-DD YYYY-MM-DD ADULTS –¶–ï–ù–ê</code>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/alert MOW LED 2025-12-01 2025-12-15 1 8000</code>\n\n"
            f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}"
        )

@dp.message(Command("alerts"))
async def alerts_cmd(message: Message):
    alerts = await get_alerts()
    user_alerts = [a for a in alerts if a[1] == message.from_user.id]
    if not user_alerts:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π")
        return
    text = "–í–∞—à–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:\n"
    for a in user_alerts:
        id_, user_id, origin, destination, start_date, end_date, adults, threshold = a
        text += f"ID {id_}: {origin} ‚Üí {destination}, {start_date}‚Äì{end_date}, {adults} adults, –¥–æ {threshold}‚ÇΩ\n"
    await message.answer(text)

@dp.message(Command("cancel"))
async def cancel_cmd(message: Message):
    try:
        _, alert_id = message.text.split()
        await delete_alert(int(alert_id), message.from_user.id)
        await message.answer("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ ‚úÖ")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# ---------- –ü–†–û–°–¢–û–ô –ü–û–®–ê–ì–û–í–´–ô –ü–û–ò–°–ö (—á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è) ----------
@dp.message(Command("search_simple"))
async def start_search_simple(message: Message, state: FSMContext):
    # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ORIG ‚Äî –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –≤—ã–ª–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: MOW):")
    await state.set_state(SearchFlight.origin)

# ================== WEB SERVER ==================
async def health_check(request):
    return web.Response(text="Telegram Bot is running! ü§ñ", status=200)

async def status_check(request):
    alerts_count = len(await get_alerts())
    me = await bot.get_me()
    return web.json_response({
        "status": "ok",
        "alerts_count": alerts_count,
        "bot_username": me.username if me else None
    })

async def create_app():
    app = web.Application()
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    app.router.add_get('/status', status_check)
    return app

# ================== BACKGROUND TASK ==================
async def monitor_alerts():
    while True:
        alerts = await get_alerts()
        for alert in alerts:
            id_, user_id, origin, destination, d1, d2, adults, threshold = alert
            try:
                start_date, end_date = isoparse(d1).date(), isoparse(d2).date()
            except Exception:
                continue
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –µ—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ—à—ë–ª ‚Äî –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            if end_date < datetime.now().date():
                # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (–º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª—è—Ç—å)
                continue
            flights = await search_range(origin, destination, start_date, end_date, adults)
            for f in flights:
                price = f.get("price", 999999)
                if price <= threshold:
                    text = (
                        f"üî• <b>–ù–∞–π–¥–µ–Ω–∞ –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞: {price} ‚ÇΩ</b>!\n"
                        f"‚úàÔ∏è {f.get('origin')} ‚Üí {f.get('destination')}\n"
                        f"üìÖ {f.get('departure_at')}\n"
                        f"üõ´ {f.get('airline', '‚Äî')}\n"
                        f"üîó https://www.aviasales.ru{f.get('link', '')}"
                    )
                    try:
                        await bot.send_message(user_id, text, disable_web_page_preview=True)
                    except Exception:
                        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∏–ª–∏ –¥—Ä. –æ—à–∏–±–∫–∞
                        pass
        await asyncio.sleep(POLL_INTERVAL_SECONDS)

# ================== MAIN ==================
async def main():
    await init_db()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ alerts –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(monitor_alerts())
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    app = await create_app()
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ –±–æ—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    await asyncio.gather(
        site.start(),
        dp.start_polling(bot)
    )

if __name__ == "__main__":
    asyncio.run(main())
