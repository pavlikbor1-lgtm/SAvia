# main.py
# -------------------------
# Configuration & constants
# -------------------------

import os
import asyncio
import httpx
import aiosqlite
from datetime import datetime, timedelta
from dateutil.parser import isoparse

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery as CallbackQueryType
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# –î–æ–±–∞–≤–ª—è–µ–º aiohttp –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
from aiohttp import web
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ================== CONFIG ==================
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TRAVELPAYOUTS_TOKEN = os.getenv("TRAVELPAYOUTS_TOKEN")
TP_CURRENCY = os.getenv("TP_CURRENCY", "rub")
POLL_INTERVAL_SECONDS = int(os.getenv("POLL_INTERVAL_SECONDS", "900"))  # 15 –º–∏–Ω
RATE_LIMIT_MS = int(os.getenv("RATE_LIMIT_MS", "400"))
PORT = int(os.getenv("PORT", "10000"))  # Render.com –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è keep-alive
SELF_PING_INTERVAL = int(os.getenv("SELF_PING_INTERVAL", "840"))  # 14 –º–∏–Ω—É—Ç
RENDER_SERVICE_URL = os.getenv("RENDER_SERVICE_URL", "")  # URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Render

bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# ================== HELPERS ==================
async def fetch_flights(origin, destination, date, adults=1):
    url = "https://api.travelpayouts.com/aviasales/v3/prices_for_dates"
    params = {
        "origin": origin,
        "destination": destination,
        "departure_at": date,
        "adults": adults,
        "currency": TP_CURRENCY,
        "token": TRAVELPAYOUTS_TOKEN,
    }
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            resp = await client.get(url, params=params)
            if resp.status_code == 200:
                return resp.json().get("data", [])
            else:
                logger.warning(f"API returned status {resp.status_code}")
                return []
    except Exception as e:
        logger.error(f"Error fetching flights: {e}")
        return []

async def search_range(origin, destination, start_date, end_date, adults=1):
    results = []
    date = start_date
    while date <= end_date:
        flights = await fetch_flights(origin, destination, date.isoformat(), adults)
        for f in flights:
            f["search_date"] = date.isoformat()
        results.extend(flights)
        await asyncio.sleep(RATE_LIMIT_MS / 1000)
        date += timedelta(days=1)
    return results

def validate_date(date_str: str) -> datetime | None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º."""
    try:
        d = datetime.strptime(date_str, "%Y-%m-%d").date()
        if d < datetime.today().date():
            return None
        return d
    except Exception:
        return None

# ================== KEEP-ALIVE FUNCTION ==================
async def keep_alive():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Render"""
    if not RENDER_SERVICE_URL:
        logger.warning("RENDER_SERVICE_URL not set, self-ping disabled")
        return
    
    while True:
        try:
            await asyncio.sleep(SELF_PING_INTERVAL)
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get(f"{RENDER_SERVICE_URL}/health")
                if response.status_code == 200:
                    logger.info("Self-ping successful")
                else:
                    logger.warning(f"Self-ping failed with status {response.status_code}")
        except Exception as e:
            logger.error(f"Self-ping error: {e}")

# ================== DB ==================
DB_PATH = "alerts.db"

async def init_db():
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("""
            CREATE TABLE IF NOT EXISTS alerts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                origin TEXT,
                destination TEXT,
                start_date TEXT,
                end_date TEXT,
                adults INTEGER,
                threshold INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            """)
            await db.commit()
            logger.info("Database initialized successfully")
    except Exception as e:
        logger.error(f"Database initialization error: {e}")

async def add_alert(user_id, origin, destination, start_date, end_date, adults, threshold):
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute(
                "INSERT INTO alerts (user_id, origin, destination, start_date, end_date, adults, threshold) VALUES (?, ?, ?, ?, ?, ?, ?)",
                (user_id, origin, destination, start_date, end_date, adults, threshold),
            )
            await db.commit()
            logger.info(f"Alert added for user {user_id}")
    except Exception as e:
        logger.error(f"Error adding alert: {e}")

async def get_alerts():
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute("SELECT id, user_id, origin, destination, start_date, end_date, adults, threshold FROM alerts") as cur:
                return await cur.fetchall()
    except Exception as e:
        logger.error(f"Error getting alerts: {e}")
        return []

async def delete_alert(alert_id, user_id):
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("DELETE FROM alerts WHERE id = ? AND user_id = ?", (alert_id, user_id))
            await db.commit()
            if cursor.rowcount > 0:
                logger.info(f"Alert {alert_id} deleted for user {user_id}")
                return True
            return False
    except Exception as e:
        logger.error(f"Error deleting alert: {e}")
        return False

# ================== FSM ==================
class SearchFlight(StatesGroup):
    origin = State()
    destination = State()
    date1 = State()
    date2 = State()
    adults = State()

# ================== MENU SETUP ==================
def get_persistent_menu():
    """–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –≤–Ω–∏–∑—É –±–æ—Ç–∞"""
    from aiogram.types import BotCommand
    return [
        BotCommand(command="start", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="search", description="üîç –ü–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤"),
        BotCommand(command="alerts", description="üìã –ú–æ–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"),
        BotCommand(command="alert", description="üîî –°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ"),
        BotCommand(command="status", description="üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
        BotCommand(command="help", description="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞")
    ]

async def setup_bot_menu():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
    try:
        await bot.set_my_commands(get_persistent_menu())
        logger.info("Bot menu commands set successfully")
    except Exception as e:
        logger.error(f"Failed to set bot commands: {e}")

# ================== KEYBOARDS ==================
def get_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤", callback_data="search_flights")],
        [InlineKeyboardButton(text="üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏", callback_data="manage_alerts")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data="show_alerts")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    return keyboard

def get_alerts_menu():
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ", callback_data="create_alert")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data="show_alerts")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    return keyboard

def get_airports_keyboard(for_destination=False):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤"""
    airports = {
        "MOW": "üèõÔ∏è –ú–æ—Å–∫–≤–∞",
        "LED": "üè∞ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        "AER": "üèñÔ∏è –°–æ—á–∏",
        "MRV": "üèîÔ∏è –ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã",
        "KZN": "üïå –ö–∞–∑–∞–Ω—å",
        "CSY": "üåä –ß–µ–±–æ–∫—Å–∞—Ä—ã"
    }
    
    keyboard = []
    for code, name in airports.items():
        callback_data = f"dest_{code}" if for_destination else f"orig_{code}"
        keyboard.append([InlineKeyboardButton(text=name, callback_data=callback_data)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
    other_callback = "dest_other" if for_destination else "orig_other"
    keyboard.append([InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –∫–æ–¥", callback_data=other_callback)])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_search")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_calendar_keyboard(year, month, selected_dates=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç"""
    import calendar
    
    if selected_dates is None:
        selected_dates = []
    
    # –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    month_names = [
        "", "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ]
    
    keyboard = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    keyboard.append([InlineKeyboardButton(
        text=f"{month_names[month]} {year}", 
        callback_data="ignore"
    )])
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    keyboard.append([
        InlineKeyboardButton(text="–ü–Ω", callback_data="ignore"),
        InlineKeyboardButton(text="–í—Ç", callback_data="ignore"),
        InlineKeyboardButton(text="–°—Ä", callback_data="ignore"),
        InlineKeyboardButton(text="–ß—Ç", callback_data="ignore"),
        InlineKeyboardButton(text="–ü—Ç", callback_data="ignore"),
        InlineKeyboardButton(text="–°–±", callback_data="ignore"),
        InlineKeyboardButton(text="–í—Å", callback_data="ignore"),
    ])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Å—è—Ü–∞
    cal = calendar.monthcalendar(year, month)
    today = datetime.now().date()
    
    for week in cal:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
            else:
                current_date = datetime(year, month, day).date()
                
                if current_date < today:
                    # –ü—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã
                    row.append(InlineKeyboardButton(text="‚ùå", callback_data="ignore"))
                elif current_date in selected_dates:
                    # –£–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã
                    row.append(InlineKeyboardButton(text=f"‚úÖ{day}", callback_data=f"date_{year}_{month}_{day}"))
                else:
                    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
                    row.append(InlineKeyboardButton(text=str(day), callback_data=f"date_{year}_{month}_{day}"))
        keyboard.append(row)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    prev_month, prev_year = (month - 1, year) if month > 1 else (12, year - 1)
    next_month, next_year = (month + 1, year) if month < 12 else (1, year + 1)
    
    keyboard.append([
        InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"cal_{prev_year}_{prev_month}"),
        InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"cal_{next_year}_{next_month}")
    ])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    if len(selected_dates) >= 2:
        keyboard.append([InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="calendar_done")])
    elif len(selected_dates) == 1:
        keyboard.append([InlineKeyboardButton(text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –¥–∞—Ç—É", callback_data="ignore")])
    else:
        keyboard.append([InlineKeyboardButton(text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –¥–∞—Ç—É", callback_data="ignore")])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_search")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# ================== BOT HANDLERS ==================
@dp.message(Command("start"))
async def start_cmd(message: Message):
    logger.info(f"Start command from user {message.from_user.id}")
    await message.answer(
        "‚úàÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ–∏—Å–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
        "üîç –ò—Å–∫–∞—Ç—å –¥–µ—à–µ–≤—ã–µ –±–∏–ª–µ—Ç—ã\n"
        "üîî –°–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö —Ü–µ–Ω–∞—Ö\n"
        "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω\n\n"
        "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –≤–Ω–∏–∑—É –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:</i>",
        reply_markup=get_main_menu()
    )

@dp.message(Command("help"))
async def help_cmd(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç"""
    help_text = (
        "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞</b>\n\n"
        "üè† <b>/start</b> - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "üîç <b>/search</b> - –ü–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤\n"
        "üìã <b>/alerts</b> - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π\n"
        "üîî <b>/alert</b> - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ\n"
        "üìä <b>/status</b> - –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n"
        "‚ÑπÔ∏è <b>/help</b> - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "<b>–§–æ—Ä–º–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:</b>\n"
        "<code>/alert ORIG DEST 2025-12-01 2025-12-15 1 8000</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:</b>\n"
        "<code>/cancel 123</code>\n\n"
        "‚úàÔ∏è <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–¥—ã –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤:</b>\n"
        "‚Ä¢ MOW - –ú–æ—Å–∫–≤–∞ ‚Ä¢ LED - –°–ü–± ‚Ä¢ AER - –°–æ—á–∏\n"
        "‚Ä¢ MRV - –ú–∏–Ω.–í–æ–¥—ã ‚Ä¢ KZN - –ö–∞–∑–∞–Ω—å ‚Ä¢ CSY - –ß–µ–±–æ–∫—Å–∞—Ä—ã"
    )
    
    await message.answer(help_text, reply_markup=get_main_menu())

# ================== CALLBACK HANDLERS ==================
@dp.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQueryType):
    await callback.message.edit_text(
        "‚úàÔ∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )
    await callback.answer()

@dp.callback_query(F.data == "help")
async def show_help(callback: CallbackQueryType):
    help_text = (
        "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "üîç <b>–ü–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤:</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã –≤—ã–ª–µ—Ç–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã –ø–æ–∏—Å–∫–∞. "
        "–ë–æ—Ç –Ω–∞–π–¥–µ—Ç 5 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n\n"
        "üîî <b>–û–ø–æ–≤–µ—â–µ–Ω–∏—è:</b>\n"
        "–°–æ–∑–¥–∞–π—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–∞—Ä—à—Ä—É—Ç–∞, –¥–∞—Ç –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã. "
        "–ë–æ—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å, –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –±–∏–ª–µ—Ç—ã.\n\n"
        "‚úàÔ∏è <b>–ö–æ–¥—ã –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤:</b>\n"
        "‚Ä¢ MOW - –ú–æ—Å–∫–≤–∞\n"
        "‚Ä¢ LED - –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\n"
        "‚Ä¢ AER - –°–æ—á–∏\n"
        "‚Ä¢ MRV - –ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã\n"
        "‚Ä¢ KZN - –ö–∞–∑–∞–Ω—å\n"
        "‚Ä¢ CSY - –ß–µ–±–æ–∫—Å–∞—Ä—ã\n\n"
        "–ò–ª–∏ –≤–≤–æ–¥–∏—Ç–µ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π IATA –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(help_text, reply_markup=keyboard)
    await callback.answer()

# ---------- –ü–û–ò–°–ö –ë–ò–õ–ï–¢–û–í (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏) ----------
@dp.callback_query(F.data == "search_flights")
async def start_search_callback(callback: CallbackQueryType, state: FSMContext):
    await callback.message.edit_text(
        "üõ´ <b>–ü–æ–∏—Å–∫ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_airports_keyboard(for_destination=False)
    )
    await state.set_state(SearchFlight.origin)
    await callback.answer()

@dp.callback_query(F.data.startswith("orig_"))
async def handle_origin_selection(callback: CallbackQueryType, state: FSMContext):
    airport_code = callback.data.split("_", 1)[1]
    
    if airport_code == "other":
        await callback.message.edit_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: SVO, VKO, DME):"
        )
        await callback.answer()
        return
    
    await state.update_data(origin=airport_code)
    await callback.message.edit_text(
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{airport_code}</b>\n\n"
        "üõ¨ –í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
        reply_markup=get_airports_keyboard(for_destination=True)
    )
    await state.set_state(SearchFlight.destination)
    await callback.answer()

@dp.message(SearchFlight.origin)
async def handle_origin_text(message: Message, state: FSMContext):
    origin = message.text.strip().upper()
    if len(origin) != 3:
        await message.answer("‚ùå –ö–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 3 –±—É–∫–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(origin=origin)
    await message.answer(
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{origin}</b>\n\n"
        "üõ¨ –í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
        reply_markup=get_airports_keyboard(for_destination=True)
    )
    await state.set_state(SearchFlight.destination)

@dp.callback_query(F.data.startswith("dest_"))
async def handle_destination_selection(callback: CallbackQueryType, state: FSMContext):
    airport_code = callback.data.split("_", 1)[1]
    
    if airport_code == "other":
        await callback.message.edit_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: LED, KZN, AER):"
        )
        await callback.answer()
        return
    
    data = await state.get_data()
    origin = data.get("origin")
    if origin and airport_code == origin:
        await callback.answer("‚ùå –ê—ç—Ä–æ–ø–æ—Ä—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º!", show_alert=True)
        return
    
    await state.update_data(destination=airport_code, selected_dates=[])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    now = datetime.now()
    await callback.message.edit_text(
        f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç: <b>{origin} ‚Üí {airport_code}</b>\n\n"
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏ (—Å–Ω–∞—á–∞–ª–∞ –¥–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞, –∑–∞—Ç–µ–º –¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è):",
        reply_markup=get_calendar_keyboard(now.year, now.month, [])
    )
    await state.set_state(SearchFlight.date1)
    await callback.answer()

@dp.message(SearchFlight.destination)
async def handle_destination_text(message: Message, state: FSMContext):
    destination = message.text.strip().upper()
    if len(destination) != 3:
        await message.answer("‚ùå –ö–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 3 –±—É–∫–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    if destination == data.get("origin"):
        await message.answer("‚ùå –ê—ç—Ä–æ–ø–æ—Ä—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(destination=destination, selected_dates=[])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    now = datetime.now()
    await message.answer(
        f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç: <b>{data['origin']} ‚Üí {destination}</b>\n\n"
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏ (—Å–Ω–∞—á–∞–ª–∞ –¥–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞, –∑–∞—Ç–µ–º –¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è):",
        reply_markup=get_calendar_keyboard(now.year, now.month, [])
    )
    await state.set_state(SearchFlight.date1)

@dp.callback_query(F.data.startswith("cal_"))
async def handle_calendar_navigation(callback: CallbackQueryType, state: FSMContext):
    try:
        _, year_str, month_str = callback.data.split("_")
        year, month = int(year_str), int(month_str)
    except Exception:
        await callback.answer()
        return
    
    data = await state.get_data()
    selected_dates = data.get("selected_dates", [])
    
    await callback.message.edit_reply_markup(
        reply_markup=get_calendar_keyboard(year, month, selected_dates)
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("date_"))
async def handle_date_selection(callback: CallbackQueryType, state: FSMContext):
    try:
        _, year, month, day = callback.data.split("_")
        selected_date = datetime(int(year), int(month), int(day)).date()
    except Exception:
        await callback.answer()
        return
    
    data = await state.get_data()
    selected_dates = data.get("selected_dates", [])
    
    # Normalize list of date objects
    selected_dates = [d if isinstance(d, datetime) else d for d in selected_dates]
    
    if selected_date in selected_dates:
        # –£–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞
        selected_dates.remove(selected_date)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É
        selected_dates.append(selected_date)
        selected_dates.sort()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏
        if len(selected_dates) > 2:
            selected_dates = selected_dates[:2]
    
    await state.update_data(selected_dates=selected_dates)
    
    await callback.message.edit_reply_markup(
        reply_markup=get_calendar_keyboard(int(year), int(month), selected_dates)
    )
    await callback.answer()

@dp.
